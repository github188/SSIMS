#############################################################################
# Makefile for building: SIMS_SERVER
# Generated by qmake (2.01a) (Qt 4.8.1) on: Thu Aug 21 17:48:20 2014
# Project:  SIMS_SERVER.pro
# Template: app
# Command: /usr/bin/qmake-qt4 CONFIG+=RELEASE -o Makefile SIMS_SERVER.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DAPP_VERSION=\"0.0.3.0\" -DBUILDTIME=\"17:48:20\" -DBUILDDATE=\"21.08.14\" -DQT_NO_DEBUG -DQT_SQL_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtNetwork -I/usr/include/qt4/QtSql -I/usr/include/qt4 -Icamera_sdk/include -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib/i386-linux-gnu -L/home/anton/Desktop/SecureT\ Server/SIMS_SERVER/camera_sdk/lib/ -lHHNet -lQtSql -lQtNetwork -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		panelcommpluginmanager.cpp \
		database/databasemanager.cpp \
		clientsnetwork/clnetserver.cpp \
		clientsnetwork/clnetsocket.cpp \
		logger/Logger.cpp \
		messagedispatcher.cpp \
		video/videomanager.cpp \
		video/remotedvr.cpp \
		video/videodata.cpp \
		clients_communication/websocketserver.cpp \
		clients_communication/communicationprotocol.cpp \
		clients_communication/clientscommandprocessor.cpp moc_panelcommpluginmanager.cpp \
		moc_databasemanager.cpp \
		moc_clnetserver.cpp \
		moc_clnetsocket.cpp \
		moc_Logger.cpp \
		moc_messagedispatcher.cpp \
		moc_videomanager.cpp \
		moc_remotedvr.cpp \
		moc_videodata.cpp \
		moc_websocketserver.cpp \
		moc_communicationprotocol.cpp \
		moc_clientscommandprocessor.cpp
OBJECTS       = main.o \
		panelcommpluginmanager.o \
		databasemanager.o \
		clnetserver.o \
		clnetsocket.o \
		Logger.o \
		messagedispatcher.o \
		videomanager.o \
		remotedvr.o \
		videodata.o \
		websocketserver.o \
		communicationprotocol.o \
		clientscommandprocessor.o \
		moc_panelcommpluginmanager.o \
		moc_databasemanager.o \
		moc_clnetserver.o \
		moc_clnetsocket.o \
		moc_Logger.o \
		moc_messagedispatcher.o \
		moc_videomanager.o \
		moc_remotedvr.o \
		moc_videodata.o \
		moc_websocketserver.o \
		moc_communicationprotocol.o \
		moc_clientscommandprocessor.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		SIMS_SERVER.pro
QMAKE_TARGET  = SIMS_SERVER
DESTDIR       = 
TARGET        = SIMS_SERVER

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET): /home/anton/Desktop/SecureT\ Server/SIMS_SERVER/camera_sdk/lib/libHHNet.a $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: SIMS_SERVER.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/i386-linux-gnu/libQtSql.prl \
		/usr/lib/i386-linux-gnu/libQtNetwork.prl \
		/usr/lib/i386-linux-gnu/libQtCore.prl
	$(QMAKE) CONFIG+=RELEASE -o Makefile SIMS_SERVER.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_phonon.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/i386-linux-gnu/libQtSql.prl:
/usr/lib/i386-linux-gnu/libQtNetwork.prl:
/usr/lib/i386-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) CONFIG+=RELEASE -o Makefile SIMS_SERVER.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/SIMS_SERVER0.0.3.0 || $(MKDIR) .tmp/SIMS_SERVER0.0.3.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/SIMS_SERVER0.0.3.0/ && $(COPY_FILE) --parents panelcomminterface.h panelcommpluginmanager.h database/databasemanager.h clientsnetwork/cldataitem.h clientsnetwork/clnetserver.h clientsnetwork/clnetsocket.h logger/Logger.h messagedispatcher.h video/videomanager.h video/remotedvr.h video/videodata.h clients_communication/websocketserver.h clients_communication/communicationprotocol.h clients_communication/clientscommandprocessor.h .tmp/SIMS_SERVER0.0.3.0/ && $(COPY_FILE) --parents main.cpp panelcommpluginmanager.cpp database/databasemanager.cpp clientsnetwork/clnetserver.cpp clientsnetwork/clnetsocket.cpp logger/Logger.cpp messagedispatcher.cpp video/videomanager.cpp video/remotedvr.cpp video/videodata.cpp clients_communication/websocketserver.cpp clients_communication/communicationprotocol.cpp clients_communication/clientscommandprocessor.cpp .tmp/SIMS_SERVER0.0.3.0/ && (cd `dirname .tmp/SIMS_SERVER0.0.3.0` && $(TAR) SIMS_SERVER0.0.3.0.tar SIMS_SERVER0.0.3.0 && $(COMPRESS) SIMS_SERVER0.0.3.0.tar) && $(MOVE) `dirname .tmp/SIMS_SERVER0.0.3.0`/SIMS_SERVER0.0.3.0.tar.gz . && $(DEL_FILE) -r .tmp/SIMS_SERVER0.0.3.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_panelcommpluginmanager.cpp moc_databasemanager.cpp moc_clnetserver.cpp moc_clnetsocket.cpp moc_Logger.cpp moc_messagedispatcher.cpp moc_videomanager.cpp moc_remotedvr.cpp moc_videodata.cpp moc_websocketserver.cpp moc_communicationprotocol.cpp moc_clientscommandprocessor.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_panelcommpluginmanager.cpp moc_databasemanager.cpp moc_clnetserver.cpp moc_clnetsocket.cpp moc_Logger.cpp moc_messagedispatcher.cpp moc_videomanager.cpp moc_remotedvr.cpp moc_videodata.cpp moc_websocketserver.cpp moc_communicationprotocol.cpp moc_clientscommandprocessor.cpp
moc_panelcommpluginmanager.cpp: panelcomminterface.h \
		database/databasemanager.h \
		panelcommpluginmanager.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) panelcommpluginmanager.h -o moc_panelcommpluginmanager.cpp

moc_databasemanager.cpp: database/databasemanager.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) database/databasemanager.h -o moc_databasemanager.cpp

moc_clnetserver.cpp: clientsnetwork/clnetsocket.h \
		clientsnetwork/clnetserver.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) clientsnetwork/clnetserver.h -o moc_clnetserver.cpp

moc_clnetsocket.cpp: clientsnetwork/clnetsocket.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) clientsnetwork/clnetsocket.h -o moc_clnetsocket.cpp

moc_Logger.cpp: logger/Logger.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) logger/Logger.h -o moc_Logger.cpp

moc_messagedispatcher.cpp: database/databasemanager.h \
		messagedispatcher.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) messagedispatcher.h -o moc_messagedispatcher.cpp

moc_videomanager.cpp: video/remotedvr.h \
		video/videodata.h \
		camera_sdk/include/HHNet.h \
		video/videomanager.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) video/videomanager.h -o moc_videomanager.cpp

moc_remotedvr.cpp: video/videodata.h \
		camera_sdk/include/HHNet.h \
		video/remotedvr.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) video/remotedvr.h -o moc_remotedvr.cpp

moc_videodata.cpp: camera_sdk/include/HHNet.h \
		video/videodata.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) video/videodata.h -o moc_videodata.cpp

moc_websocketserver.cpp: clients_communication/websocketserver.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) clients_communication/websocketserver.h -o moc_websocketserver.cpp

moc_communicationprotocol.cpp: clients_communication/communicationprotocol.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) clients_communication/communicationprotocol.h -o moc_communicationprotocol.cpp

moc_clientscommandprocessor.cpp: clients_communication/communicationprotocol.h \
		clients_communication/websocketserver.h \
		clients_communication/clientscommandprocessor.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) clients_communication/clientscommandprocessor.h -o moc_clientscommandprocessor.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

main.o: main.cpp panelcommpluginmanager.h \
		panelcomminterface.h \
		database/databasemanager.h \
		messagedispatcher.h \
		clientsnetwork/clnetserver.h \
		clientsnetwork/clnetsocket.h \
		video/videomanager.h \
		video/remotedvr.h \
		video/videodata.h \
		camera_sdk/include/HHNet.h \
		clients_communication/clientscommandprocessor.h \
		clients_communication/communicationprotocol.h \
		clients_communication/websocketserver.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

panelcommpluginmanager.o: panelcommpluginmanager.cpp panelcommpluginmanager.h \
		panelcomminterface.h \
		database/databasemanager.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o panelcommpluginmanager.o panelcommpluginmanager.cpp

databasemanager.o: database/databasemanager.cpp database/databasemanager.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o databasemanager.o database/databasemanager.cpp

clnetserver.o: clientsnetwork/clnetserver.cpp clientsnetwork/clnetserver.h \
		clientsnetwork/clnetsocket.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o clnetserver.o clientsnetwork/clnetserver.cpp

clnetsocket.o: clientsnetwork/clnetsocket.cpp clientsnetwork/clnetsocket.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o clnetsocket.o clientsnetwork/clnetsocket.cpp

Logger.o: logger/Logger.cpp logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Logger.o logger/Logger.cpp

messagedispatcher.o: messagedispatcher.cpp messagedispatcher.h \
		database/databasemanager.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o messagedispatcher.o messagedispatcher.cpp

videomanager.o: video/videomanager.cpp video/videomanager.h \
		video/remotedvr.h \
		video/videodata.h \
		camera_sdk/include/HHNet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o videomanager.o video/videomanager.cpp

remotedvr.o: video/remotedvr.cpp video/remotedvr.h \
		video/videodata.h \
		camera_sdk/include/HHNet.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o remotedvr.o video/remotedvr.cpp

videodata.o: video/videodata.cpp video/videodata.h \
		camera_sdk/include/HHNet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o videodata.o video/videodata.cpp

websocketserver.o: clients_communication/websocketserver.cpp clients_communication/websocketserver.h \
		logger/Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o websocketserver.o clients_communication/websocketserver.cpp

communicationprotocol.o: clients_communication/communicationprotocol.cpp clients_communication/communicationprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o communicationprotocol.o clients_communication/communicationprotocol.cpp

clientscommandprocessor.o: clients_communication/clientscommandprocessor.cpp clients_communication/clientscommandprocessor.h \
		clients_communication/communicationprotocol.h \
		clients_communication/websocketserver.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o clientscommandprocessor.o clients_communication/clientscommandprocessor.cpp

moc_panelcommpluginmanager.o: moc_panelcommpluginmanager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_panelcommpluginmanager.o moc_panelcommpluginmanager.cpp

moc_databasemanager.o: moc_databasemanager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_databasemanager.o moc_databasemanager.cpp

moc_clnetserver.o: moc_clnetserver.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_clnetserver.o moc_clnetserver.cpp

moc_clnetsocket.o: moc_clnetsocket.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_clnetsocket.o moc_clnetsocket.cpp

moc_Logger.o: moc_Logger.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Logger.o moc_Logger.cpp

moc_messagedispatcher.o: moc_messagedispatcher.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_messagedispatcher.o moc_messagedispatcher.cpp

moc_videomanager.o: moc_videomanager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_videomanager.o moc_videomanager.cpp

moc_remotedvr.o: moc_remotedvr.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_remotedvr.o moc_remotedvr.cpp

moc_videodata.o: moc_videodata.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_videodata.o moc_videodata.cpp

moc_websocketserver.o: moc_websocketserver.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_websocketserver.o moc_websocketserver.cpp

moc_communicationprotocol.o: moc_communicationprotocol.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_communicationprotocol.o moc_communicationprotocol.cpp

moc_clientscommandprocessor.o: moc_clientscommandprocessor.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_clientscommandprocessor.o moc_clientscommandprocessor.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

